apply plugin: 'maven-publish'

static def getBranch() {
    def process = 'git branch --show-current'.execute()
    process.waitFor()
    return process.text.trim()
}

static def getHash() {
    def process = 'git rev-parse HEAD'.execute()
    process.waitFor()
    return process.text.trim()
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    manifest {
        attributes(
                'Build-Jdk': "${System.properties['java.vendor']} ${System.properties['java.vm.version']}",
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Git-Branch': getBranch(),
                'Git-Hash': getHash()
        )
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
            artifactId = project.getName().toLowerCase()
            groupId = ((String) project.getGroup()).toLowerCase()
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        def isGitHub = System.getenv("GITHUB_REPOSITORY") ? true : false
        if (isGitHub) {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/${project.findProperty("GITHUB_REPOSITORY") ?: System.getenv("GITHUB_REPOSITORY")}")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
            maven {
                name = "GeorgeV22"

                url = uri("https://repo.georgev22.com/releases")

                def mavenUsername = System.getenv("MAVEN_USERNAME") ? System.getenv("MAVEN_USERNAME") :
                        System.getProperty("MAVEN_USERNAME") ? System.getProperty("MAVEN_USERNAME") : null
                def mavenPassword = System.getenv("MAVEN_PASSWORD") ? System.getenv("MAVEN_PASSWORD") :
                        System.getProperty("MAVEN_PASSWORD") ? System.getProperty("MAVEN_PASSWORD") : null

                if (mavenUsername != null && mavenPassword != null) {
                    credentials {
                        username = mavenUsername
                        password = mavenPassword
                    }
                    authentication {
                        basic(BasicAuthentication)
                    }
                }
            }
        }
        if (!isGitHub) {
            maven {
                name = "GeorgeV22"

                url = uri("https://repo.georgev22.com/snapshots")

                def mavenUsername = System.getenv("MAVEN_USERNAME") ? System.getenv("MAVEN_USERNAME") :
                        System.getProperty("MAVEN_USERNAME") ? System.getProperty("MAVEN_USERNAME") : null
                def mavenPassword = System.getenv("MAVEN_PASSWORD") ? System.getenv("MAVEN_PASSWORD") :
                        System.getProperty("MAVEN_PASSWORD") ? System.getProperty("MAVEN_PASSWORD") : null

                if (mavenUsername != null && mavenPassword != null) {
                    credentials {
                        username = mavenUsername
                        password = mavenPassword
                    }
                    authentication {
                        basic(BasicAuthentication)
                    }
                }
            }
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}
